#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""The init script for Janitoo Raspberry Pi server
"""
__license__ = """
    This file is part of Janitoo.

    Janitoo is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Janitoo is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Janitoo. If not, see <http://www.gnu.org/licenses/>.
"""
__author__ = 'SÃ©bastien GALLET aka bibi21000'
__email__ = 'bibi21000@gmail.com'

# Set default logging handler to avoid "No handler found" warnings.
import logging
logger = logging.getLogger(__name__)
import sys, os, re, shutil, datetime
from janitoo.runner import Runner, jnt_parse_args
from janitoo.options import JNTOptions
from janitoo_tkinter import JanitooTk
from janitoo_tkinter.frame import FrameRoot

class MyTkUi(Runner):

    def __init__(self):
        Runner.__init__(self, only_front=True)
        self.root = None
        self.section = 'tkinter'
        #~ self.scale = self.options.get_option('system', 'scale', self.scale)
        self.section = 'tkinter'
        #print self.options

    def app_run(self):
        options = JNTOptions(self.options)
        self.root = JanitooTk(options=options, section=self.section)
        #Buggy
        #~ self.root.set_geometry()
        main = FrameRoot(self.root, options=options, section=self.section)
        main.master.title("Janitoo tkui")
        main.pack(fill='both', expand=1)
        self.root.start_listener()
        self.root.mainloop()
        self.root.stop_listener()
        #~ self.root.destroy()
        #~ self.root = None

    def app_shutdown(self):
        #~ self.root.stop_listener()
        #~ self.root.destroy()
        self.root = None

daemon_runner = MyTkUi()
#This ensures that the logger file handle does not get closed during daemonization
#daemon_runner.daemon_context.files_preserve=[handler.stream]
daemon_runner.do_action()
